#!/usr/bin/env node

/**
 * Module dependencies.
 */

<<<<<<< HEAD
var app = require("../app");
var debug = require("debug")("webcode-crm:server");
var http = require("http");
=======
var app = require('../app');
var debug = require('debug')('webcode-crm:server');
var http = require('http');
>>>>>>> 9cdcf3eb1b3659eac5a9b886ca323dacae2e6555

/**
 * Get port from environment and store in Express.
 */
<<<<<<< HEAD

var port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log("Server is listening", port);
});
server.on("error", onError);
server.on("listening", onListening);
=======

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, ()=>{console.log("Server is listening",port)});
server.on('error', onError);
server.on('listening', onListening);
>>>>>>> 9cdcf3eb1b3659eac5a9b886ca323dacae2e6555

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
<<<<<<< HEAD
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
=======
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
>>>>>>> 9cdcf3eb1b3659eac5a9b886ca323dacae2e6555
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
<<<<<<< HEAD
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
=======
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
>>>>>>> 9cdcf3eb1b3659eac5a9b886ca323dacae2e6555
